http://www.conferenceranks.com/visualization/msar2014.html?field=Network%20%26%20Communications&visualization=Bars
https://github.com/EbookFoundation/free-programming-books/blob/master/free-programming-books.md#clojure

http://faculty.cs.tamu.edu/guofei/sec_conf_stat.htm
https://en.wikipedia.org/wiki/List_of_distributed_computing_conferences
https://en.wikipedia.org/wiki/List_of_computer_science_conferences#Computer_networking

https://en.wikipedia.org/wiki/Computational_materials_science#Conferences
https://en.wikipedia.org/wiki/List_of_materials_science_journals


https://mc04.manuscriptcentral.com/apex-jsap
https://iopscience.iop.org/journal/1882-0786
https://iopscience.iop.org/article/10.7567/1882-0786/ab2922/meta

more physics conferences
https://www.worldscientific.com/worldscinet/mplb  Modern Physics Letters B
https://en.wikipedia.org/wiki/Journal_of_Applied_Physics
https://en.wikipedia.org/wiki/Physica_(journal) see physica c for superconductivity
https://www.conference-service.com/conferences/low-temperature-physics.html

------
What's the difference between a lecture, a tutorial and a workshop?
A lecture is a formal presentation conducted by your lecturer.

Tutorials are smaller classes which allow discussion of lecture content and assignments. 
You can ask questions and clarify what you have studied.

Workshops usually involve academic staff presenting themes or concepts related to the course. 
Workshops are usually more hands on learning that allow discussion regarding the given topic.
------
http://www.vldb.org/pvldb/vol12/p1986-nargesian.pdf



1. data validation for ml
2. super conductor dataset
3. PPTA
4. 5G AND PRIVACY
5. PATH PLANNING
6. EMAIL & WEB QUARANTINE

https://vldb2020.org/formatting-guidelines.html
=========
https://github.com/chair6/varnish-wrapper
==============
But the general theme of the algo questions asked is around the following:
1. Greedy
2. DP
3. Graphs
-bfs dfs
- dag toposort toporanks
- shortest paths: djikstra bellman ford FW
-articulation points and bridges
- Euler paths
- MST prims and kruskal
- max flow min cut
4. Binary search
5. Stacks
6. Heaps
7. Disjoint set union
------------
This post answers this question pretty well:
Source: https://leetcode.com/discuss/career/229177/My-System-Design-Template

(1) FEATURE EXPECTATIONS [5 min]
(1) Use cases
(2) Scenarios that will not be covered
(3) Who will use
(4) How many will use
(5) Usage patterns

(2) ESTIMATIONS [5 min]
(1) Throughput (QPS for read and write queries)
(2) Latency expected from the system (for read and write queries)
(3) Read/Write ratio
(4) Traffic estimates
- Write (QPS, Volume of data)
- Read (QPS, Volume of data)
(5) Storage estimates
(6) Memory estimates
- If we are using a cache, what is the kind of data we want to store in cache
- How much RAM and how many machines do we need for us to achieve this ?
- Amount of data you want to store in disk/ssd

(3) DESIGN GOALS [5 min]
(1) Latency and Throughput requirements
(2) Consistency vs Availability [Weak/strong/eventual => consistency | Failover/replication => availability]

(4) HIGH LEVEL DESIGN [5-10 min]
(1) APIs for Read/Write scenarios for crucial components
(2) Database schema
(3) Basic algorithm
(4) High level design for Read/Write scenario

(5) DEEP DIVE [15-20 min]
(1) Scaling the algorithm
(2) Scaling individual components:
-> Availability, Consistency and Scale story for each component
-> Consistency and availability patterns
(3) Think about the following components, how they would fit in and how it would help
a) DNS
b) CDN [Push vs Pull]
c) Load Balancers [Active-Passive, Active-Active, Layer 4, Layer 7]
d) Reverse Proxy
e) Application layer scaling [Microservices, Service Discovery]
f) DB [RDBMS, NoSQL]
> RDBMS
>> Master-slave, Master-master, Federation, Sharding, Denormalization, SQL Tuning
> NoSQL
>> Key-Value, Wide-Column, Graph, Document
Fast-lookups:
-------------
>>> RAM [Bounded size] => Redis, Memcached
>>> AP [Unbounded size] => Cassandra, RIAK, Voldemort
>>> CP [Unbounded size] => HBase, MongoDB, Couchbase, DynamoDB
g) Caches
> Client caching, CDN caching, Webserver caching, Database caching, Application caching, Cache @Query level, Cache @Object level
> Eviction policies:
>> Cache aside
>> Write through
>> Write behind
>> Refresh ahead
h) Asynchronism
> Message queues
> Task queues
> Back pressure
i) Communication
> TCP
> UDP
> REST
> RPC
(6) JUSTIFY [5 min]
(1) Throughput of each layer
(2) Latency caused between each layer
(3) Overall latency justification
